# Dataset configuration context

# name of the dataset
name = "<name>"

[graph]
context = "<file>.nt.gz"

train = "<context>.nt.gz"
valid = "<context>.nt.gz"
test = "<context>.nt.gz"

[graph.structural]
include_inverse_properties = true
exclude_properties = []  # use empty list to include all
separate_literals = false
multiprocessing = false

[[graph.features]]
datatype = 'xsd.numeric'
include = true
share_weights = false
embedding_dim = 4
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.boolean'
include = true
share_weights = false
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.gYear'
include = true
share_weights = false
embedding_dim = 1
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.date'
include = true
share_weights = false
embedding_dim = 3
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.dateTime'
include = true
share_weights = false
embedding_dim = 3
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.string'
include = true
num_batches = 16
share_weights = false
trim_outliers = false
remove_outliers = false
embedding_dim = 16
optim_lr = 0.001
optim_momentum = 0.1
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'xsd.anyURI'
include = true
num_batches = 16
share_weights = false
trim_outliers = false
remove_outliers = false
embedding_dim = 16
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'blob.image'
include = true
num_batches = 16
share_weights = false
trim_outliers = false
remove_outliers = false
embedding_dim = 128
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[[graph.features]]
datatype = 'ogc.wktLiteral'
include = true
num_batches = 16
share_weights = false
remove_outliers = false
embedding_dim = 16
p_dropout = 0.0
p_noise = 0.0
noise_multiplier = 0.0

[task]
# node classification
# type = classification
target_property = '<URI>'
target_property_inv = '<URI>'

# link prediction
type = 'link prediction'
distmult_on_gpu = false
eval_interval = 10
filter_ranks = true

seed = -1  # use < 0 for random
model_on_gpu = false

[model]
epoch = 50
learning_rate = 0.01
mrr_batch_size = 5e1
num_bases = 0
p_dropout = 0.0
weight_decay = 0.0
l1_lambda = 0.0
l2_lambda = 0.0
bias = false

[[model.layers]]
type = 'mrgcn'
hidden_nodes = 16

[[model.layers]]
type = 'mrgcn'
